// grpc-etcd/pb/hello/proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.11.2
// source: pb/hello.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Greeter1_SayHello1_FullMethodName = "/hello.Greeter1/SayHello1"
)

// Greeter1Client is the client API for Greeter1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义服务，到时候是 Greeter.SayHello。注册到服务发现中心的是 ip:port
type Greeter1Client interface {
	// SayHello 方法
	SayHello1(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type greeter1Client struct {
	cc grpc.ClientConnInterface
}

func NewGreeter1Client(cc grpc.ClientConnInterface) Greeter1Client {
	return &greeter1Client{cc}
}

func (c *greeter1Client) SayHello1(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Greeter1_SayHello1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Greeter1Server is the server API for Greeter1 service.
// All implementations must embed UnimplementedGreeter1Server
// for forward compatibility.
//
// 定义服务，到时候是 Greeter.SayHello。注册到服务发现中心的是 ip:port
type Greeter1Server interface {
	// SayHello 方法
	SayHello1(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedGreeter1Server()
}

// UnimplementedGreeter1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeter1Server struct{}

func (UnimplementedGreeter1Server) SayHello1(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello1 not implemented")
}
func (UnimplementedGreeter1Server) mustEmbedUnimplementedGreeter1Server() {}
func (UnimplementedGreeter1Server) testEmbeddedByValue()                  {}

// UnsafeGreeter1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Greeter1Server will
// result in compilation errors.
type UnsafeGreeter1Server interface {
	mustEmbedUnimplementedGreeter1Server()
}

func RegisterGreeter1Server(s grpc.ServiceRegistrar, srv Greeter1Server) {
	// If the following call pancis, it indicates UnimplementedGreeter1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Greeter1_ServiceDesc, srv)
}

func _Greeter1_SayHello1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Greeter1Server).SayHello1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter1_SayHello1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Greeter1Server).SayHello1(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter1_ServiceDesc is the grpc.ServiceDesc for Greeter1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Greeter1",
	HandlerType: (*Greeter1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello1",
			Handler:    _Greeter1_SayHello1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/hello.proto",
}

const (
	Greeter2_SayHello2_FullMethodName = "/hello.Greeter2/SayHello2"
)

// Greeter2Client is the client API for Greeter2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Greeter2Client interface {
	// SayHello 方法
	SayHello2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type greeter2Client struct {
	cc grpc.ClientConnInterface
}

func NewGreeter2Client(cc grpc.ClientConnInterface) Greeter2Client {
	return &greeter2Client{cc}
}

func (c *greeter2Client) SayHello2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Greeter2_SayHello2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Greeter2Server is the server API for Greeter2 service.
// All implementations must embed UnimplementedGreeter2Server
// for forward compatibility.
type Greeter2Server interface {
	// SayHello 方法
	SayHello2(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedGreeter2Server()
}

// UnimplementedGreeter2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeter2Server struct{}

func (UnimplementedGreeter2Server) SayHello2(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello2 not implemented")
}
func (UnimplementedGreeter2Server) mustEmbedUnimplementedGreeter2Server() {}
func (UnimplementedGreeter2Server) testEmbeddedByValue()                  {}

// UnsafeGreeter2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Greeter2Server will
// result in compilation errors.
type UnsafeGreeter2Server interface {
	mustEmbedUnimplementedGreeter2Server()
}

func RegisterGreeter2Server(s grpc.ServiceRegistrar, srv Greeter2Server) {
	// If the following call pancis, it indicates UnimplementedGreeter2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Greeter2_ServiceDesc, srv)
}

func _Greeter2_SayHello2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Greeter2Server).SayHello2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter2_SayHello2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Greeter2Server).SayHello2(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter2_ServiceDesc is the grpc.ServiceDesc for Greeter2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Greeter2",
	HandlerType: (*Greeter2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello2",
			Handler:    _Greeter2_SayHello2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/hello.proto",
}
